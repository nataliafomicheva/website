---
import type { HTMLAttributes } from "astro/types";
import bem from "easy-bem";
import Chevron from "../assets/icons/chevron.svg";

const cn = bem("dropdown");

interface Props extends HTMLAttributes<"details"> {
    text: string;
    popupClassName?: string;
}

const ICON_SIZE = 12;

const { class: className, popupClassName, text, ...props } = Astro.props;
---

<details class:list={[cn(), className]} {...props}>
    <summary class:list={cn("summary")}>
        <span class:list={cn("text")}>
            {text}
        </span>
        <Chevron class:list={cn("icon", { hidden: true })} size={ICON_SIZE} />
    </summary>
    <div class:list={[cn("popup", { hidden: true }), popupClassName]}>
        <slot name="popup-content" />
    </div>
</details>

<style lang="scss">
    @use "../styles/mixins";

    .dropdown {
        --dropdown-summary-gap: 8px;
        --dropdown-icon-transform: rotate(0deg);
        --dropdown-popup-background: var(--color-background-primary);
        --dropdown-popup-triangle-size: 8px;
        --dropdown-popup-top: calc(100% + var(--dropdown-popup-triangle-size));
        --dropdown-popup-border-radius: 8px;
        --dropdown-popup-translate: translate(-50%, 0px);

        position: relative;
        display: inline-block;

        &__summary {
            display: flex;
            align-items: center;
            gap: var(--dropdown-summary-gap);
            list-style: none;
            cursor: pointer;
        }

        &__icon {
            transform: var(--dropdown-icon-transform);
            transition: all 0.1s linear;

            &--hidden {
                --dropdown-icon-transform: rotate(180deg);
            }
        }

        &__popup {
            position: absolute;
            top: var(--dropdown-popup-top);
            left: 50%;
            border-radius: var(--dropdown-popup-border-radius);
            background: var(--dropdown-popup-background);
            transform: var(--dropdown-popup-translate);
            transition: all 0.1s linear;
            opacity: 1;

            @include mixins.box-shadow-light;

            &--hidden {
                opacity: 0;

                --dropdown-popup-translate: translate(-50%, 8px);
            }

            &::before {
                position: absolute;
                top: calc(-1 * var(--dropdown-popup-triangle-size));
                left: 50%;
                width: 0;
                height: 0;
                border-width: 0 calc(var(--dropdown-popup-triangle-size) / 2)
                    var(--dropdown-popup-triangle-size);
                border-style: solid;
                border-color: transparent transparent
                    var(--dropdown-popup-background);
                content: "";
                transform: translateX(-50%);
            }
        }
    }
</style>

<script>
    const dropdownElements = document.querySelectorAll(".dropdown");

    dropdownElements.forEach((dropdown) => {
        let closeTimer: number | null = null;
        const CLOSE_TIMER_DELAY = 500;
        const dropdownPopup = dropdown.querySelector(".dropdown__popup");
        const dropdownIcon = dropdown.querySelector(".dropdown__icon");

        dropdown.addEventListener("mouseenter", () => {
            if (closeTimer) {
                clearTimeout(closeTimer);
                closeTimer = null;
            }

            dropdown.setAttribute("open", "true");
            setTimeout(() => {
                dropdownIcon?.classList.remove("dropdown__icon--hidden");
                dropdownPopup?.classList.remove("dropdown__popup--hidden");
            });
        });

        dropdown.addEventListener("mouseleave", () => {
            closeTimer = setTimeout(() => {
                dropdownIcon?.classList.add("dropdown__icon--hidden");
                dropdownPopup?.classList.add("dropdown__popup--hidden");
                setTimeout(() => {
                    dropdown.removeAttribute("open");
                }, 100); // need 100ms for animation to end
            }, CLOSE_TIMER_DELAY);
        });

        dropdown.addEventListener("click", (evt) => {
            evt.preventDefault();
        });
    });
</script>
